#!/usr/bin/env ruby

# # #
# given a string,
#  1) count the number of palindromes in it
#  2) find the palindromes
#
# learnt from here:
#  www.computersciencesalaryrange.com/dynamic-programming-tutorial/

@debug = !true

def verboser msg
  if @debug
    puts msg
  end
end

######################################################################

def palindrome_substring? str, left, right
  verboser "Is #{left..right} \"#{str[left..right]}\" a palindrome?"
  max_iter = (1+right-left) / 2
  max_iter.times do |offset|
    if str[left+offset] != str[right-offset]
      return false
    end
  end
  verboser " Yes"
  return true
end

######################################################################

def count_palindromes str
  # at each position the array contains the best (the lowest) number
  # of palindromes that end at this position.
  counts = [1] # the first character is a palindrome

  1.upto(str.length-1) do |right|
    # the worst case:
    # when the current character does not form any palindromes with
    # any preceeding adjacent substrings.
    counts[right] = counts[right-1] + 1

    # investigate all substrings that start between 0 and right
    # and end at right and find out if any of them is a palindrome
    0.upto(right-1) do |left|
      if palindrome_substring?(str, left, right)
        # decide which is better (which makes for less number of palindroms):
        # - when the char at right is a palindrome itself
        # - or when the char at right forms a palindrome with a left substring
        #
        # count_at_left is the best number of palindromes in the substring
        # that starts at 0 and ends just before left
        count_before_left = left > 0 ? counts[left-1] : 0
        if count_before_left+1 < counts[right]
          # there is a better string splitting:
          #  str[0...left] and str[left..right]
          counts[right] = count_before_left+1
        end
      end
    end
  end

  verboser "Better splitting in palindromes consists of #{counts.last} chunks"

  counts.last
end

######################################################################
# instead of palindrome_substring? that is costly, we use a lookup
# 2D table: palindromes[left][right]
#      | A B A A B A B A
#      | 0 1 2 3 4 5 6 7
#  ----|------------------
#  A 0 | t - t - - t - -
#  B 1 |   t - - t - - -
#  A 2 |     t t - - - -
#  A 3 |       t - t - t
#  B 4 |         t - t -
#  A 5 |           t - t
#  B 6 |             t -
#  A 7 |               t
# 
# This table is not created as a separate task, but rather it is built
# as the main count palindromes algorithm goes.
# The key observation is that the string is a palindrome if
#   1) its first char equals its last char
#   2) and the inner part [1..-2] is also a palindrome
#

def count_palindromes_2 str

  counts = [1]
  palindromes = Array.new(str.length) { Array.new(str.length, false) }
#  palindromes[0][0] = true # for purposes of getting a full & correct matrix only.

  1.upto(str.length-1) do |right|
    palindromes[right][right] = true # diagonal
    counts[right] = counts[right-1] + 1 # worst case

    (right-1).downto(0) do |left|
      # why right-left <= 2
      # 1) there is no palindrome between adjacent letters.
      #    Looking up palindromes[left+1][right-1]) will fail in this case.
      #    To avoid this failure, at least the following is necessary:
      #      left+1 == right
      # 2) [optimization] one letter per se is a palindrome, therefore do not need to additionally
      #    check if it is a palindrome using the palindromes[][] matrix.
      #    Otherwise left+1 == right would work fine.
      if str[left] == str[right] && (right-left <= 1 || palindromes[left+1][right-1])
        palindromes[left][right] = true

        # select better splitting
        count_before_left = left > 0 ? counts[left-1] : 0
        if count_before_left+1 < counts[right]
          counts[right] = count_before_left+1
        end
      end
    end
  end

#  show_matrix(palindromes)

  counts.last
end

######################################################################

def show_matrix m
  s = ''
  m.each do |row|
    s << row.map { |el| el ? 't' : '-' }.join(' ') << "\n"
  end
  puts s
end

######################################################################
# tests

puts count_palindromes("abaababa") == 2
puts count_palindromes("abaaba")   == 1
puts count_palindromes("abcaba")   == 4

puts "Another algorithm"

puts count_palindromes_2("abaababa") == 2
puts count_palindromes_2("abaaba")   == 1
puts count_palindromes_2("abcaba")   == 4
